</div>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>

<% if(typeof book != "undefined" && user ) { %>


<script src="/socket.io/socket.io.js"></script>

<script>
        const bookId = `<%= book.id %>`;
        const socket = io.connect('/', {query: `bookId=${bookId}`});
 
        const boxList = document.querySelector('#list');
        const displayName = `<%= user.displayName %>`;
        const inputText = document.querySelector('#text');
        const sendMsg = document.querySelector('#send-msg');

        
        const getTmp = (msg) => {
        const currentDate = new Date();
        const day = currentDate.getDate().toString().padStart(2, '0'); 
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');  
        const year = currentDate.getFullYear();
        const hours = currentDate.getHours().toString().padStart(2, '0');
        const minutes = currentDate.getMinutes().toString().padStart(2, '0');


        return `
                <div class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                        <small class="text-muted">${msg.username} - ${day}.${month}.${year} ${hours}:${minutes} </small>
                        </div>
                        <p class="mb-1">${msg.text}</p>
                </div>
        `;
        };

        socket.on('message-to-book', (msg) => {
                const div = getTmp(msg)
                boxList.insertAdjacentHTML('afterbegin', div)
        });

        sendMsg.addEventListener('click', () => {
                socket.emit('message-to-book', {
                username: displayName,
                text: inputText.value,
                })
                const messageData = {
                bookid: '<%= book.id %>',
                username: '<%= user.username %>',
                message: inputText.value
        };

        fetch('/api/message', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json',
                },
                body: JSON.stringify(messageData),
        })
        .then(response => {
                if (response.ok) {
                return response.json();
                }
                throw new Error('Network response was not ok');
        })

        })
      
        // Логика обработки комментариев и отправки на сервер через сокеты
      </script>
  <% } %>  
</body>
</html>